import requests

# This is an example query as it is generated by the rppo package
# https://biscicol.org/api/v3/download/_search?q=+dayOfYear:<=1++AND+++dayOfYear:<=100++AND+++latitude:>=-130+AND++latitude:<=40+AND++longitude:>=-130+AND++longitude:<=-110++AND+++source:USA-NPN&limit=2


def get_traits(present=None):
    """Retrieve a list of phenological traits with their PPO codes.

    present: If True or False, only include the ppo codes for the presence resp.
        absence of traits. If None (the default), both are provided.

    Examples:

    traits = get_traits()
    list(traits.items())[:5]
    > [('abscised cones or seeds absent', 'obo:PPO_0002658'),
    >  ('abscised cones or seeds present', 'obo:PPO_0002359'),
    >  ('abscised fruits or seeds absent', 'obo:PPO_0002657'),
    >  ('abscised fruits or seeds present', 'obo:PPO_0002358'),
    >  ('abscised leaves absent', 'obo:PPO_0002656')]

    traits = get_traits(present=False)
    list(traits.items())[:5]
    > [('abscised cones or seeds absent', 'obo:PPO_0002658'),
    >  ('abscised fruits or seeds absent', 'obo:PPO_0002657'),
    >  ('abscised leaves absent', 'obo:PPO_0002656'),
    >  ('breaking leaf buds absent', 'obo:PPO_0002610'),
    >  ('cones absent', 'obo:PPO_0002645')]

    """
    if present is None:
        url = f"https://biscicol.org/api/v2/ppo/all_short"
    elif present is True:
        url = f"https://biscicol.org/api/v2/ppo/present_short"
    elif present is False:
        url = f"https://biscicol.org/api/v2/ppo/absent_short"
    else:
        raise ValueError(f"Present should be None or Boolean, got {present}")

    r = requests.get(url)

    if r.status_code == 200:
        return r.json()

    raise ValueError(f"Request failed with status code {r.status_code}")

get_traits()
get_traits(present=True)
get_traits(present=False)


def search(size=5, **options):
    base_url = f"https://biscicol.org/api/v1/query/_search?size={size}"
    query = "&q=" + "+AND+".join([f"{k}:{v}" for k, v in options.items()])
    print(base_url + query)
    r = requests.get(base_url + query)
    if r.status_code == 200:
        return r.json()
    raise ValueError(f"Request failed with status code {r.status_code}")


#    Queries are handled by looking at lucene-type queries in the GET Parameters
#    looking for q= and source requests are handled looking at _source= variable

r = search(genus="Quercus")
r = search(genus="Syringa", source="PEP725")
r = search(genus="Syringa", source="PEP725", year="[2000 TO 2021]")
r = search(genus="Syringa", source="PEP725", year="[2000 TO 2021]", latitude="[40 TO 70]", longitude="[-10 TO 40]")
r = search(
    genus="Syringa",
    source="PEP725",
    year="[2000 TO 2021]",
    latitude="[40 TO 70]",
    longitude="[-10 TO 40]",
    plantStructurePresenceTypes="\"obo:PPO_0002330\"",  # flowers present
    )
